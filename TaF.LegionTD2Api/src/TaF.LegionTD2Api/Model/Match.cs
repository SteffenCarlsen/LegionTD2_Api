/*
 * LTD2ApiV2
 *
 * This is the official Legion TD 2 public API. The new API endpoint is https://apiv2.legiontd2.com/ <br /> You can generate your key at <a href='https://developer.legiontd2.com/'>developer.legiontd2.com</a><br />In your requests add the HTTP header 'x-api-key' and your secret key from the developer portal. <br /><br />For icons, emotes or splash art images you can use our CDN: <a href='https://cdn.legiontd2.com/icons/Yozora.png'>cdn.legiontd2.com</a>. <br /> If you prefer to host the icons on your own server you can find the image files in your game files: 'Steam\\steamapps\\common\\Legion TD 2\\Legion TD 2_Data\\uiresources\\AeonGT\\hud\\img\\icons'<br /> <br /> The current limits are 15 requests per second / 10k burst requests and a maximum of 10k requests per day. If you need a higher limit, reach out to us in discord or through our support portal. <br /> <br /> If you have any other questions, feel free to ask in the &#35;api channel on the <a href='https://discord.gg/4K4xwCz2DN'>Legion TD 2 Contributors Discord</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace TaF.LegionTD2Api.Model
{
    /// <summary>
    ///     Match
    /// </summary>
    [DataContract]
    public class Match : IEquatable<Match>, IValidatableObject
    {
        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("date")]
        public DateTime? Date { get; set; }

        [JsonProperty("queueType")]
        public string QueueType { get; set; }

        [JsonProperty("endingWave")]
        public int? EndingWave { get; set; }

        [JsonProperty("gameLength")]
        public int? GameLength { get; set; }

        [JsonProperty("gameElo")]
        public int? GameElo { get; set; }

        [JsonProperty("playerCount")]
        public int? PlayerCount { get; set; }

        [JsonProperty("humanCount")]
        public int? HumanCount { get; set; }

        [JsonProperty("spellChoices")]
        public List<string> SpellChoices { get; set; }

        [JsonProperty("leftKingPercentHp")]
        public List<double?> LeftKingPercentHp { get; set; }

        [JsonProperty("rightKingPercentHp")]
        public List<double?> RightKingPercentHp { get; set; }

        [JsonProperty("kingSpell")]
        public string KingSpell { get; set; }

        [JsonProperty("playersData")]
        public List<PlayersData> PlayersData { get; set; }
        
        public bool Equals(Match input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Version == input.Version ||
                    (Version != null &&
                     Version.Equals(input.Version))
                ) &&
                (
                    Date == input.Date ||
                    (Date != null &&
                     Date.Equals(input.Date))
                ) &&
                (
                    QueueType == input.QueueType ||
                    (QueueType != null &&
                     QueueType.Equals(input.QueueType))
                ) &&
                (
                    EndingWave == input.EndingWave ||
                    (EndingWave != null &&
                     EndingWave.Equals(input.EndingWave))
                ) &&
                (
                    GameElo == input.GameElo ||
                    (GameElo != null &&
                     GameElo.Equals(input.GameElo))
                ) &&
                (
                    PlayerCount == input.PlayerCount ||
                    (PlayerCount != null &&
                     PlayerCount.Equals(input.PlayerCount))
                ) &&
                (
                    HumanCount == input.HumanCount ||
                    (HumanCount != null &&
                     HumanCount.Equals(input.HumanCount))
                ) &&
                (
                    LeftKingPercentHp == input.LeftKingPercentHp ||
                    (LeftKingPercentHp != null &&
                     input.LeftKingPercentHp != null &&
                     LeftKingPercentHp.SequenceEqual(input.LeftKingPercentHp))
                ) &&
                (
                    RightKingPercentHp == input.RightKingPercentHp ||
                    (RightKingPercentHp != null &&
                     input.RightKingPercentHp != null &&
                     RightKingPercentHp.SequenceEqual(input.RightKingPercentHp))
                ) &&
                (
                    GameLength == input.GameLength ||
                    (GameLength != null &&
                     GameLength.Equals(input.GameLength))
                ) &&
                (
                    SpellChoices == input.SpellChoices ||
                    (SpellChoices != null &&
                     input.SpellChoices != null &&
                     SpellChoices.SequenceEqual(input.SpellChoices))
                ) &&
                (
                    KingSpell == input.KingSpell ||
                    (KingSpell != null &&
                     KingSpell.Equals(input.KingSpell))
                ) &&
                (
                    PlayersData == input.PlayersData ||
                    (PlayersData != null &&
                     input.PlayersData != null &&
                     PlayersData.SequenceEqual(input.PlayersData))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Match {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Version: ").Append(Version).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  QueueType: ").Append(QueueType).Append("\n");
            sb.Append("  EndingWave: ").Append(EndingWave).Append("\n");
            sb.Append("  GameElo: ").Append(GameElo).Append("\n");
            sb.Append("  PlayerCount: ").Append(PlayerCount).Append("\n");
            sb.Append("  HumanCount: ").Append(HumanCount).Append("\n");
            sb.Append("  LeftKingPercentHp: ").Append(LeftKingPercentHp).Append("\n");
            sb.Append("  RightKingPercentHp: ").Append(RightKingPercentHp).Append("\n");
            sb.Append("  GameLength: ").Append(GameLength).Append("\n");
            sb.Append("  SpellChoices: ").Append(SpellChoices).Append("\n");
            sb.Append("  KingSpell: ").Append(KingSpell).Append("\n");
            sb.Append("  PlayersData: ").Append(PlayersData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Match);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                if (QueueType != null)
                    hashCode = hashCode * 59 + QueueType.GetHashCode();
                if (EndingWave != null)
                    hashCode = hashCode * 59 + EndingWave.GetHashCode();
                if (GameElo != null)
                    hashCode = hashCode * 59 + GameElo.GetHashCode();
                if (PlayerCount != null)
                    hashCode = hashCode * 59 + PlayerCount.GetHashCode();
                if (HumanCount != null)
                    hashCode = hashCode * 59 + HumanCount.GetHashCode();
                if (LeftKingPercentHp != null)
                    hashCode = hashCode * 59 + LeftKingPercentHp.GetHashCode();
                if (RightKingPercentHp != null)
                    hashCode = hashCode * 59 + RightKingPercentHp.GetHashCode();
                if (GameLength != null)
                    hashCode = hashCode * 59 + GameLength.GetHashCode();
                if (SpellChoices != null)
                    hashCode = hashCode * 59 + SpellChoices.GetHashCode();
                if (KingSpell != null)
                    hashCode = hashCode * 59 + KingSpell.GetHashCode();
                if (PlayersData != null)
                    hashCode = hashCode * 59 + PlayersData.GetHashCode();
                return hashCode;
            }
        }
    }
}