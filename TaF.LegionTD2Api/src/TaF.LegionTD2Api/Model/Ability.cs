/*
 * LTD2ApiV2
 *
 * This is the official Legion TD 2 public API. The new API endpoint is https://apiv2.legiontd2.com/ <br /> You can generate your key at <a href='https://developer.legiontd2.com/'>developer.legiontd2.com</a><br />In your requests add the HTTP header 'x-api-key' and your secret key from the developer portal. <br /><br />For icons, emotes or splash art images you can use our CDN: <a href='https://cdn.legiontd2.com/icons/Yozora.png'>cdn.legiontd2.com</a>. <br /> If you prefer to host the icons on your own server you can find the image files in your game files: 'Steam\\steamapps\\common\\Legion TD 2\\Legion TD 2_Data\\uiresources\\AeonGT\\hud\\img\\icons'<br /> <br /> The current limits are 15 requests per second / 10k burst requests and a maximum of 10k requests per day. If you need a higher limit, reach out to us in discord or through our support portal. <br /> <br /> If you have any other questions, feel free to ask in the &#35;api channel on the <a href='https://discord.gg/4K4xwCz2DN'>Legion TD 2 Contributors Discord</a>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace TaF.LegionTD2Api.Model;

/// <summary>
///     Ability
/// </summary>
[DataContract]
public class Ability : IEquatable<Ability>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="Ability" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected Ability() { }

    /// <summary>
    ///     Initializes a new instance of the <see cref="Ability" /> class.
    /// </summary>
    /// <param name="id">id.</param>
    /// <param name="name">name (required).</param>
    /// <param name="aoeRange">aoeRange.</param>
    /// <param name="tooltip">tooltip.</param>
    /// <param name="duration">duration.</param>
    /// <param name="iconPath">iconPath.</param>
    /// <param name="category">category.</param>
    /// <param name="description">description.</param>
    /// <param name="bounces">bounces.</param>
    /// <param name="baseDamage">baseDamage.</param>
    /// <param name="cooldown">cooldown.</param>
    /// <param name="descriptionId">descriptionId.</param>
    public Ability(string id = default, string name = default, int aoeRange = default, string tooltip = default, string duration = default, string iconPath = default, string category = default, string description = default, string bounces = default, string baseDamage = default, string cooldown = default, string descriptionId = default)
    {
        // to ensure "name" is required (not null)
        if (name == null)
        {
            throw new InvalidDataException("name is a required property for Ability and cannot be null");
        }

        Name = name;

        Id = id;
        AoeRange = aoeRange;
        Tooltip = tooltip;
        Duration = duration;
        IconPath = iconPath;
        Category = category;
        Description = description;
        Bounces = bounces;
        BaseDamage = baseDamage;
        Cooldown = cooldown;
        DescriptionId = descriptionId;
    }

    /// <summary>
    ///     Gets or Sets Id
    /// </summary>
    [DataMember(Name = "_id", EmitDefaultValue = false)]
    public string Id { get; set; }

    /// <summary>
    ///     Gets or Sets Name
    /// </summary>
    [DataMember(Name = "name", EmitDefaultValue = true)]
    public string Name { get; set; }

    /// <summary>
    ///     Gets or Sets AoeRange
    /// </summary>
    [DataMember(Name = "aoeRange", EmitDefaultValue = false)]
    public int AoeRange { get; set; }

    /// <summary>
    ///     Gets or Sets Tooltip
    /// </summary>
    [DataMember(Name = "tooltip", EmitDefaultValue = false)]
    public string Tooltip { get; set; }

    /// <summary>
    ///     Gets or Sets Duration
    /// </summary>
    [DataMember(Name = "duration", EmitDefaultValue = false)]
    public string Duration { get; set; }

    /// <summary>
    ///     Gets or Sets IconPath
    /// </summary>
    [DataMember(Name = "iconPath", EmitDefaultValue = false)]
    public string IconPath { get; set; }

    /// <summary>
    ///     Gets or Sets Category
    /// </summary>
    [DataMember(Name = "category", EmitDefaultValue = false)]
    public string Category { get; set; }

    /// <summary>
    ///     Gets or Sets Description
    /// </summary>
    [DataMember(Name = "description", EmitDefaultValue = false)]
    public string Description { get; set; }

    /// <summary>
    ///     Gets or Sets Bounces
    /// </summary>
    [DataMember(Name = "bounces", EmitDefaultValue = false)]
    public string Bounces { get; set; }

    /// <summary>
    ///     Gets or Sets BaseDamage
    /// </summary>
    [DataMember(Name = "baseDamage", EmitDefaultValue = false)]
    public string BaseDamage { get; set; }

    /// <summary>
    ///     Gets or Sets Cooldown
    /// </summary>
    [DataMember(Name = "cooldown", EmitDefaultValue = false)]
    public string Cooldown { get; set; }

    /// <summary>
    ///     Gets or Sets DescriptionId
    /// </summary>
    [DataMember(Name = "descriptionId", EmitDefaultValue = false)]
    public string DescriptionId { get; set; }

    /// <summary>
    ///     Returns true if Ability instances are equal
    /// </summary>
    /// <param name="input">Instance of Ability to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Ability input)
    {
        if (input == null)
        {
            return false;
        }

        return (Id == input.Id || (Id != null && Id.Equals(input.Id))) && (Name == input.Name || (Name != null && Name.Equals(input.Name))) && (AoeRange == input.AoeRange || (AoeRange != null && AoeRange.Equals(input.AoeRange))) && (Tooltip == input.Tooltip || (Tooltip != null && Tooltip.Equals(input.Tooltip))) && (Duration == input.Duration || (Duration != null && Duration.Equals(input.Duration))) && (IconPath == input.IconPath || (IconPath != null && IconPath.Equals(input.IconPath))) && (Category == input.Category || (Category != null && Category.Equals(input.Category))) && (Description == input.Description || (Description != null && Description.Equals(input.Description))) && (Bounces == input.Bounces || (Bounces != null && Bounces.Equals(input.Bounces))) && (BaseDamage == input.BaseDamage || (BaseDamage != null && BaseDamage.Equals(input.BaseDamage))) && (Cooldown == input.Cooldown || (Cooldown != null && Cooldown.Equals(input.Cooldown))) && (DescriptionId == input.DescriptionId || (DescriptionId != null && DescriptionId.Equals(input.DescriptionId)));
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Ability {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  AoeRange: ").Append(AoeRange).Append("\n");
        sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
        sb.Append("  Duration: ").Append(Duration).Append("\n");
        sb.Append("  IconPath: ").Append(IconPath).Append("\n");
        sb.Append("  Category: ").Append(Category).Append("\n");
        sb.Append("  Description: ").Append(Description).Append("\n");
        sb.Append("  Bounces: ").Append(Bounces).Append("\n");
        sb.Append("  BaseDamage: ").Append(BaseDamage).Append("\n");
        sb.Append("  Cooldown: ").Append(Cooldown).Append("\n");
        sb.Append("  DescriptionId: ").Append(DescriptionId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as Ability);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null)
            {
                hashCode = hashCode * 59 + Id.GetHashCode();
            }

            if (Name != null)
            {
                hashCode = hashCode * 59 + Name.GetHashCode();
            }

            if (AoeRange != null)
            {
                hashCode = hashCode * 59 + AoeRange.GetHashCode();
            }

            if (Tooltip != null)
            {
                hashCode = hashCode * 59 + Tooltip.GetHashCode();
            }

            if (Duration != null)
            {
                hashCode = hashCode * 59 + Duration.GetHashCode();
            }

            if (IconPath != null)
            {
                hashCode = hashCode * 59 + IconPath.GetHashCode();
            }

            if (Category != null)
            {
                hashCode = hashCode * 59 + Category.GetHashCode();
            }

            if (Description != null)
            {
                hashCode = hashCode * 59 + Description.GetHashCode();
            }

            if (Bounces != null)
            {
                hashCode = hashCode * 59 + Bounces.GetHashCode();
            }

            if (BaseDamage != null)
            {
                hashCode = hashCode * 59 + BaseDamage.GetHashCode();
            }

            if (Cooldown != null)
            {
                hashCode = hashCode * 59 + Cooldown.GetHashCode();
            }

            if (DescriptionId != null)
            {
                hashCode = hashCode * 59 + DescriptionId.GetHashCode();
            }

            return hashCode;
        }
    }
}