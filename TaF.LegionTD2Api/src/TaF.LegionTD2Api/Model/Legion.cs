/*
 * LTD2ApiV2
 *
 * This is the official Legion TD 2 public API. The new API endpoint is https://apiv2.legiontd2.com/ <br /> You can generate your key at <a href='https://developer.legiontd2.com/'>developer.legiontd2.com</a><br />In your requests add the HTTP header 'x-api-key' and your secret key from the developer portal. <br /><br />For icons, emotes or splash art images you can use our CDN: <a href='https://cdn.legiontd2.com/icons/Yozora.png'>cdn.legiontd2.com</a>. <br /> If you prefer to host the icons on your own server you can find the image files in your game files: 'Steam\\steamapps\\common\\Legion TD 2\\Legion TD 2_Data\\uiresources\\AeonGT\\hud\\img\\icons'<br /> <br /> The current limits are 15 requests per second / 10k burst requests and a maximum of 10k requests per day. If you need a higher limit, reach out to us in discord or through our support portal. <br /> <br /> If you have any other questions, feel free to ask in the &#35;api channel on the <a href='https://discord.gg/4K4xwCz2DN'>Legion TD 2 Contributors Discord</a>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace TaF.LegionTD2Api.Model;

/// <summary>
///     Legion
/// </summary>
[DataContract]
public class Legion : IEquatable<Legion>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="Legion" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected Legion() { }

    /// <summary>
    ///     Initializes a new instance of the <see cref="Legion" /> class.
    /// </summary>
    /// <param name="id">id.</param>
    /// <param name="name">name (required).</param>
    /// <param name="category">category.</param>
    /// <param name="iconPath">iconPath.</param>
    /// <param name="playable">playable.</param>
    public Legion(string id = default, string name = default, string category = default, string iconPath = default, bool playable = default)
    {
        // to ensure "name" is required (not null)
        if (name == null)
        {
            throw new InvalidDataException("name is a required property for Legion and cannot be null");
        }

        Name = name;

        Id = id;
        Category = category;
        IconPath = iconPath;
        Playable = playable;
    }

    /// <summary>
    ///     Gets or Sets Id
    /// </summary>
    [DataMember(Name = "_id", EmitDefaultValue = false)]
    public string Id { get; set; }

    /// <summary>
    ///     Gets or Sets Name
    /// </summary>
    [DataMember(Name = "name", EmitDefaultValue = true)]
    public string Name { get; set; }

    /// <summary>
    ///     Gets or Sets Category
    /// </summary>
    [DataMember(Name = "category", EmitDefaultValue = false)]
    public string Category { get; set; }

    /// <summary>
    ///     Gets or Sets IconPath
    /// </summary>
    [DataMember(Name = "iconPath", EmitDefaultValue = false)]
    public string IconPath { get; set; }

    /// <summary>
    ///     Gets or Sets Playable
    /// </summary>
    [DataMember(Name = "playable", EmitDefaultValue = false)]
    public bool Playable { get; set; }

    /// <summary>
    ///     Returns true if Legion instances are equal
    /// </summary>
    /// <param name="input">Instance of Legion to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Legion input)
    {
        if (input == null)
        {
            return false;
        }

        return (Id == input.Id || (Id != null && Id.Equals(input.Id))) && (Name == input.Name || (Name != null && Name.Equals(input.Name))) && (Category == input.Category || (Category != null && Category.Equals(input.Category))) && (IconPath == input.IconPath || (IconPath != null && IconPath.Equals(input.IconPath))) && (Playable == input.Playable || (Playable != null && Playable.Equals(input.Playable)));
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Legion {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  Category: ").Append(Category).Append("\n");
        sb.Append("  IconPath: ").Append(IconPath).Append("\n");
        sb.Append("  Playable: ").Append(Playable).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as Legion);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null)
            {
                hashCode = hashCode * 59 + Id.GetHashCode();
            }

            if (Name != null)
            {
                hashCode = hashCode * 59 + Name.GetHashCode();
            }

            if (Category != null)
            {
                hashCode = hashCode * 59 + Category.GetHashCode();
            }

            if (IconPath != null)
            {
                hashCode = hashCode * 59 + IconPath.GetHashCode();
            }

            if (Playable != null)
            {
                hashCode = hashCode * 59 + Playable.GetHashCode();
            }

            return hashCode;
        }
    }
}