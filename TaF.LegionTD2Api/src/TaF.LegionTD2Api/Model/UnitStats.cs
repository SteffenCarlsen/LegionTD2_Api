/*
 * LTD2ApiV2
 *
 * This is the official Legion TD 2 public API. The new API endpoint is https://apiv2.legiontd2.com/ <br /> You can generate your key at <a href='https://developer.legiontd2.com/'>developer.legiontd2.com</a><br />In your requests add the HTTP header 'x-api-key' and your secret key from the developer portal. <br /><br />For icons, emotes or splash art images you can use our CDN: <a href='https://cdn.legiontd2.com/icons/Yozora.png'>cdn.legiontd2.com</a>. <br /> If you prefer to host the icons on your own server you can find the image files in your game files: 'Steam\\steamapps\\common\\Legion TD 2\\Legion TD 2_Data\\uiresources\\AeonGT\\hud\\img\\icons'<br /> <br /> The current limits are 15 requests per second / 10k burst requests and a maximum of 10k requests per day. If you need a higher limit, reach out to us in discord or through our support portal. <br /> <br /> If you have any other questions, feel free to ask in the &#35;api channel on the <a href='https://discord.gg/4K4xwCz2DN'>Legion TD 2 Contributors Discord</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TaF.LegionTD2Api.Model
{
    /// <summary>
    ///     UnitStats
    /// </summary>
    [DataContract]
    public class UnitStats : IEquatable<UnitStats>, IValidatableObject
    {
        /// <summary>
        ///     Defines ArmorType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ArmorTypeEnum
        {
            /// <summary>
            ///     Enum Arcane for value: Arcane
            /// </summary>
            [EnumMember(Value = "Arcane")] Arcane = 1,

            /// <summary>
            ///     Enum Fortified for value: Fortified
            /// </summary>
            [EnumMember(Value = "Fortified")] Fortified = 2,

            /// <summary>
            ///     Enum Immaterial for value: Immaterial
            /// </summary>
            [EnumMember(Value = "Immaterial")] Immaterial = 3,

            /// <summary>
            ///     Enum Natural for value: Natural
            /// </summary>
            [EnumMember(Value = "Natural")] Natural = 4,

            /// <summary>
            ///     Enum Swift for value: Swift
            /// </summary>
            [EnumMember(Value = "Swift")] Swift = 5
        }

        /// <summary>
        ///     Note: Siege is no longer used
        /// </summary>
        /// <value>Note: Siege is no longer used</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttackTypeEnum
        {
            /// <summary>
            ///     Enum Impact for value: Impact
            /// </summary>
            [EnumMember(Value = "Impact")] Impact = 1,

            /// <summary>
            ///     Enum Magic for value: Magic
            /// </summary>
            [EnumMember(Value = "Magic")] Magic = 2,

            /// <summary>
            ///     Enum Pierce for value: Pierce
            /// </summary>
            [EnumMember(Value = "Pierce")] Pierce = 3,

            /// <summary>
            ///     Enum Pure for value: Pure
            /// </summary>
            [EnumMember(Value = "Pure")] Pure = 4,

            /// <summary>
            ///     Enum Siege for value: Siege
            /// </summary>
            [EnumMember(Value = "Siege")] Siege = 5
        }

        /// <summary>
        ///     Defines Flags
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlagsEnum
        {
            /// <summary>
            ///     Enum Boss for value: Boss
            /// </summary>
            [EnumMember(Value = "Boss")] Boss = 1,

            /// <summary>
            ///     Enum Building for value: Building
            /// </summary>
            [EnumMember(Value = "Building")] Building = 2,

            /// <summary>
            ///     Enum Dead for value: Dead
            /// </summary>
            [EnumMember(Value = "Dead")] Dead = 3,

            /// <summary>
            ///     Enum Air for value: Air
            /// </summary>
            [EnumMember(Value = "Air")] Air = 4,

            /// <summary>
            ///     Enum Ground for value: Ground
            /// </summary>
            [EnumMember(Value = "Ground")] Ground = 5,

            /// <summary>
            ///     Enum Immune for value: Immune
            /// </summary>
            [EnumMember(Value = "Immune")] Immune = 6,

            /// <summary>
            ///     Enum CannotBeHealed for value: Cannot Be Healed
            /// </summary>
            [EnumMember(Value = "Cannot Be Healed")]
            CannotBeHealed = 7,

            /// <summary>
            ///     Enum King for value: King
            /// </summary>
            [EnumMember(Value = "King")] King = 8,

            /// <summary>
            ///     Enum Mechnical for value: Mechnical
            /// </summary>
            [EnumMember(Value = "Mechnical")] Mechnical = 9,

            /// <summary>
            ///     Enum Organic for value: Organic
            /// </summary>
            [EnumMember(Value = "Organic")] Organic = 10,

            /// <summary>
            ///     Enum Summoned for value: Summoned
            /// </summary>
            [EnumMember(Value = "Summoned")] Summoned = 11,

            /// <summary>
            ///     Enum Undead for value: Undead
            /// </summary>
            [EnumMember(Value = "Undead")] Undead = 12,

            /// <summary>
            ///     Enum Unselectable for value: Unselectable
            /// </summary>
            [EnumMember(Value = "Unselectable")] Unselectable = 13,

            /// <summary>
            ///     Enum Invulnerable for value: Invulnerable
            /// </summary>
            [EnumMember(Value = "Invulnerable")] Invulnerable = 14,

            /// <summary>
            ///     Enum Harvestable for value: Harvestable
            /// </summary>
            [EnumMember(Value = "Harvestable")] Harvestable = 15,

            /// <summary>
            ///     Enum Ghost for value: Ghost
            /// </summary>
            [EnumMember(Value = "Ghost")] Ghost = 16
        }

        /// <summary>
        ///     Defines MoveSpeedText
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MoveSpeedTextEnum
        {
            /// <summary>
            ///     Enum Average for value: Average
            /// </summary>
            [EnumMember(Value = "Average")] Average = 1,

            /// <summary>
            ///     Enum VerySlow for value: Very Slow
            /// </summary>
            [EnumMember(Value = "Very Slow")] VerySlow = 2,

            /// <summary>
            ///     Enum Veryfast for value: Very fast
            /// </summary>
            [EnumMember(Value = "Very fast")] Veryfast = 3
        }

        /// <summary>
        ///     Defines MoveType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MoveTypeEnum
        {
            /// <summary>
            ///     Enum Ground for value: Ground
            /// </summary>
            [EnumMember(Value = "Ground")] Ground = 1,

            /// <summary>
            ///     Enum Air for value: Air
            /// </summary>
            [EnumMember(Value = "Air")] Air = 2,

            /// <summary>
            ///     Enum Hover for value: Hover
            /// </summary>
            [EnumMember(Value = "Hover")] Hover = 3,

            /// <summary>
            ///     Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")] None = 4
        }

        /// <summary>
        ///     Creatures &#x3D; Units that spawn every wave &lt;br&gt; Fighter &#x3D; Units that can be deployed by the player for
        ///     gold &lt;br&gt; King &#x3D; Base that has to be defended &lt;br&gt; Mercenary &#x3D; Units that can be hired for
        ///     mythium and get sent to the opponents lane &lt;br&gt; Worker &#x3D; Units that collect mythium &lt;br&gt;
        /// </summary>
        /// <value>
        ///     Creatures &#x3D; Units that spawn every wave &lt;br&gt; Fighter &#x3D; Units that can be deployed by the player
        ///     for gold &lt;br&gt; King &#x3D; Base that has to be defended &lt;br&gt; Mercenary &#x3D; Units that can be hired
        ///     for mythium and get sent to the opponents lane &lt;br&gt; Worker &#x3D; Units that collect mythium &lt;br&gt;
        /// </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitClassEnum
        {
            /// <summary>
            ///     Enum Creature for value: Creature
            /// </summary>
            [EnumMember(Value = "Creature")] Creature = 1,

            /// <summary>
            ///     Enum Fighter for value: Fighter
            /// </summary>
            [EnumMember(Value = "Fighter")] Fighter = 2,

            /// <summary>
            ///     Enum King for value: King
            /// </summary>
            [EnumMember(Value = "King")] King = 3,

            /// <summary>
            ///     Enum Mercenary for value: Mercenary
            /// </summary>
            [EnumMember(Value = "Mercenary")] Mercenary = 4,

            /// <summary>
            ///     Enum Worker for value: Worker
            /// </summary>
            [EnumMember(Value = "Worker")] Worker = 5,

            /// <summary>
            ///     Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")] None = 6
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="UnitStats" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="hp">hp.</param>
        /// <param name="mp">mp.</param>
        /// <param name="attackSpeed">attackSpeed.</param>
        /// <param name="attackSpeedInverted">attackSpeedInverted.</param>
        /// <param name="moveSpeed">moveSpeed.</param>
        /// <param name="flags">flags.</param>
        /// <param name="attackRange">attackRange.</param>
        /// <param name="legionId">legionId.</param>
        /// <param name="tooltip">tooltip.</param>
        /// <param name="goldCost">goldCost.</param>
        /// <param name="iconPath">iconPath.</param>
        /// <param name="infoTier">infoTier.</param>
        /// <param name="moveType">moveType.</param>
        /// <param name="moveSpeedText">moveSpeedText.</param>
        /// <param name="abilities">Contains ability ids.</param>
        /// <param name="armorType">armorType.</param>
        /// <param name="goldValue">goldValue.</param>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="sortHelper">Includes a sortable string with the syntax legion.tier.value.name.</param>
        /// <param name="unitClass">
        ///     Creatures &#x3D; Units that spawn every wave &lt;br&gt; Fighter &#x3D; Units that can be
        ///     deployed by the player for gold &lt;br&gt; King &#x3D; Base that has to be defended &lt;br&gt; Mercenary &#x3D;
        ///     Units that can be hired for mythium and get sent to the opponents lane &lt;br&gt; Worker &#x3D; Units that collect
        ///     mythium &lt;br&gt; .
        /// </param>
        /// <param name="attackMode">attackMode.</param>
        /// <param name="attackType">Note: Siege is no longer used.</param>
        /// <param name="goldBounty">goldBounty.</param>
        /// <param name="modelScale">modelScale.</param>
        /// <param name="splashPath">splashPath.</param>
        /// <param name="totalValue">totalValue.</param>
        /// <param name="upgradesTo">upgradesTo.</param>
        /// <param name="incomeBonus">incomeBonus.</param>
        /// <param name="mythiumCost">mythiumCost.</param>
        /// <param name="upgradesFrom">upgradesFrom.</param>
        /// <param name="categoryClass">categoryClass.</param>
        /// <param name="sketchfabUrl">sketchfabUrl.</param>
        /// <param name="descriptionId">descriptionId.</param>
        /// <param name="maxDamage">maxDamage.</param>
        /// <param name="baseDamage">baseDamage.</param>
        /// <param name="expectedDamage">expectedDamage.</param>
        /// <param name="avgHp">avgHp.</param>
        /// <param name="avgHpDiff">avgHpDiff.</param>
        /// <param name="avgDmg">avgDmg.</param>
        /// <param name="avgDmgDiff">avgDmgDiff.</param>
        /// <param name="avgAspd">avgAspd.</param>
        /// <param name="avgAspdDiff">avgAspdDiff.</param>
        /// <param name="avgCost">avgCost.</param>
        /// <param name="avgCostDiff">avgCostDiff.</param>
        /// <param name="avgMspd">avgMspd.</param>
        /// <param name="avgMspdDiff">avgMspdDiff.</param>
        public UnitStats(string name = default, string hp = default, string mp = default, string attackSpeed = default,
            string attackSpeedInverted = default, string moveSpeed = default, FlagsEnum? flags = default,
            string attackRange = default, string legionId = default, string tooltip = default,
            string goldCost = default, string iconPath = default, string infoTier = default,
            MoveTypeEnum? moveType = default, MoveSpeedTextEnum? moveSpeedText = default,
            List<string> abilities = default, ArmorTypeEnum? armorType = default, string goldValue = default,
            bool isEnabled = default, string sortHelper = default, UnitClassEnum? unitClass = default,
            string attackMode = default, AttackTypeEnum? attackType = default, string goldBounty = default,
            decimal modelScale = default, string splashPath = default, string totalValue = default,
            List<string> upgradesTo = default, string incomeBonus = default, string mythiumCost = default,
            string upgradesFrom = default, string categoryClass = default, string sketchfabUrl = default,
            string descriptionId = default, string maxDamage = default, string baseDamage = default,
            string expectedDamage = default, string avgHp = default, string avgHpDiff = default,
            string avgDmg = default, string avgDmgDiff = default, string avgAspd = default,
            string avgAspdDiff = default, string avgCost = default, string avgCostDiff = default,
            string avgMspd = default, string avgMspdDiff = default)
        {
            Name = name;
            Hp = hp;
            Mp = mp;
            AttackSpeed = attackSpeed;
            AttackSpeedInverted = attackSpeedInverted;
            MoveSpeed = moveSpeed;
            Flags = flags;
            AttackRange = attackRange;
            LegionId = legionId;
            Tooltip = tooltip;
            GoldCost = goldCost;
            IconPath = iconPath;
            InfoTier = infoTier;
            MoveType = moveType;
            MoveSpeedText = moveSpeedText;
            Abilities = abilities;
            ArmorType = armorType;
            GoldValue = goldValue;
            IsEnabled = isEnabled;
            SortHelper = sortHelper;
            UnitClass = unitClass;
            AttackMode = attackMode;
            AttackType = attackType;
            GoldBounty = goldBounty;
            ModelScale = modelScale;
            SplashPath = splashPath;
            TotalValue = totalValue;
            UpgradesTo = upgradesTo;
            IncomeBonus = incomeBonus;
            MythiumCost = mythiumCost;
            UpgradesFrom = upgradesFrom;
            CategoryClass = categoryClass;
            SketchfabUrl = sketchfabUrl;
            DescriptionId = descriptionId;
            MaxDamage = maxDamage;
            BaseDamage = baseDamage;
            ExpectedDamage = expectedDamage;
            AvgHp = avgHp;
            AvgHpDiff = avgHpDiff;
            AvgDmg = avgDmg;
            AvgDmgDiff = avgDmgDiff;
            AvgAspd = avgAspd;
            AvgAspdDiff = avgAspdDiff;
            AvgCost = avgCost;
            AvgCostDiff = avgCostDiff;
            AvgMspd = avgMspd;
            AvgMspdDiff = avgMspdDiff;
        }

        /// <summary>
        ///     Gets or Sets Flags
        /// </summary>
        [DataMember(Name = "flags", EmitDefaultValue = false)]
        public FlagsEnum? Flags { get; set; }

        /// <summary>
        ///     Gets or Sets MoveType
        /// </summary>
        [DataMember(Name = "moveType", EmitDefaultValue = false)]
        public MoveTypeEnum? MoveType { get; set; }

        /// <summary>
        ///     Gets or Sets MoveSpeedText
        /// </summary>
        [DataMember(Name = "moveSpeedText", EmitDefaultValue = false)]
        public MoveSpeedTextEnum? MoveSpeedText { get; set; }

        /// <summary>
        ///     Gets or Sets ArmorType
        /// </summary>
        [DataMember(Name = "armorType", EmitDefaultValue = false)]
        public ArmorTypeEnum? ArmorType { get; set; }

        /// <summary>
        ///     Creatures &#x3D; Units that spawn every wave &lt;br&gt; Fighter &#x3D; Units that can be deployed by the player for
        ///     gold &lt;br&gt; King &#x3D; Base that has to be defended &lt;br&gt; Mercenary &#x3D; Units that can be hired for
        ///     mythium and get sent to the opponents lane &lt;br&gt; Worker &#x3D; Units that collect mythium &lt;br&gt;
        /// </summary>
        /// <value>
        ///     Creatures &#x3D; Units that spawn every wave &lt;br&gt; Fighter &#x3D; Units that can be deployed by the player
        ///     for gold &lt;br&gt; King &#x3D; Base that has to be defended &lt;br&gt; Mercenary &#x3D; Units that can be hired
        ///     for mythium and get sent to the opponents lane &lt;br&gt; Worker &#x3D; Units that collect mythium &lt;br&gt;
        /// </value>
        [DataMember(Name = "unitClass", EmitDefaultValue = false)]
        public UnitClassEnum? UnitClass { get; set; }

        /// <summary>
        ///     Note: Siege is no longer used
        /// </summary>
        /// <value>Note: Siege is no longer used</value>
        [DataMember(Name = "attackType", EmitDefaultValue = false)]
        public AttackTypeEnum? AttackType { get; set; }

        /// <summary>
        ///     Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     Gets or Sets Hp
        /// </summary>
        [DataMember(Name = "hp", EmitDefaultValue = false)]
        public string Hp { get; set; }

        /// <summary>
        ///     Gets or Sets Mp
        /// </summary>
        [DataMember(Name = "mp", EmitDefaultValue = false)]
        public string Mp { get; set; }

        /// <summary>
        ///     Gets or Sets AttackSpeed
        /// </summary>
        [DataMember(Name = "attackSpeed", EmitDefaultValue = false)]
        public string AttackSpeed { get; set; }

        /// <summary>
        ///     Gets or Sets AttackSpeedInverted
        /// </summary>
        [DataMember(Name = "attackSpeedInverted", EmitDefaultValue = false)]
        public string AttackSpeedInverted { get; set; }

        /// <summary>
        ///     Gets or Sets MoveSpeed
        /// </summary>
        [DataMember(Name = "moveSpeed", EmitDefaultValue = false)]
        public string MoveSpeed { get; set; }


        /// <summary>
        ///     Gets or Sets AttackRange
        /// </summary>
        [DataMember(Name = "attackRange", EmitDefaultValue = false)]
        public string AttackRange { get; set; }

        /// <summary>
        ///     Gets or Sets LegionId
        /// </summary>
        [DataMember(Name = "legionId", EmitDefaultValue = false)]
        public string LegionId { get; set; }

        /// <summary>
        ///     Gets or Sets Tooltip
        /// </summary>
        [DataMember(Name = "tooltip", EmitDefaultValue = false)]
        public string Tooltip { get; set; }

        /// <summary>
        ///     Gets or Sets GoldCost
        /// </summary>
        [DataMember(Name = "goldCost", EmitDefaultValue = false)]
        public string GoldCost { get; set; }

        /// <summary>
        ///     Gets or Sets IconPath
        /// </summary>
        [DataMember(Name = "iconPath", EmitDefaultValue = false)]
        public string IconPath { get; set; }

        /// <summary>
        ///     Gets or Sets InfoTier
        /// </summary>
        [DataMember(Name = "infoTier", EmitDefaultValue = false)]
        public string InfoTier { get; set; }


        /// <summary>
        ///     Contains ability ids
        /// </summary>
        /// <value>Contains ability ids</value>
        [DataMember(Name = "abilities", EmitDefaultValue = false)]
        public List<string> Abilities { get; set; }


        /// <summary>
        ///     Gets or Sets GoldValue
        /// </summary>
        [DataMember(Name = "goldValue", EmitDefaultValue = false)]
        public string GoldValue { get; set; }

        /// <summary>
        ///     Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "isEnabled", EmitDefaultValue = false)]
        public bool IsEnabled { get; set; }

        /// <summary>
        ///     Includes a sortable string with the syntax legion.tier.value.name
        /// </summary>
        /// <value>Includes a sortable string with the syntax legion.tier.value.name</value>
        [DataMember(Name = "sortHelper", EmitDefaultValue = false)]
        public string SortHelper { get; set; }


        /// <summary>
        ///     Gets or Sets AttackMode
        /// </summary>
        [DataMember(Name = "attackMode", EmitDefaultValue = false)]
        public string AttackMode { get; set; }


        /// <summary>
        ///     Gets or Sets GoldBounty
        /// </summary>
        [DataMember(Name = "goldBounty", EmitDefaultValue = false)]
        public string GoldBounty { get; set; }

        /// <summary>
        ///     Gets or Sets ModelScale
        /// </summary>
        [DataMember(Name = "modelScale", EmitDefaultValue = false)]
        public decimal ModelScale { get; set; }

        /// <summary>
        ///     Gets or Sets SplashPath
        /// </summary>
        [DataMember(Name = "splashPath", EmitDefaultValue = false)]
        public string SplashPath { get; set; }

        /// <summary>
        ///     Gets or Sets TotalValue
        /// </summary>
        [DataMember(Name = "totalValue", EmitDefaultValue = false)]
        public string TotalValue { get; set; }

        /// <summary>
        ///     Gets or Sets UpgradesTo
        /// </summary>
        [DataMember(Name = "upgradesTo", EmitDefaultValue = false)]
        public List<string> UpgradesTo { get; set; }

        /// <summary>
        ///     Gets or Sets IncomeBonus
        /// </summary>
        [DataMember(Name = "incomeBonus", EmitDefaultValue = false)]
        public string IncomeBonus { get; set; }

        /// <summary>
        ///     Gets or Sets MythiumCost
        /// </summary>
        [DataMember(Name = "mythiumCost", EmitDefaultValue = false)]
        public string MythiumCost { get; set; }

        /// <summary>
        ///     Gets or Sets UpgradesFrom
        /// </summary>
        [DataMember(Name = "upgradesFrom", EmitDefaultValue = false)]
        public string UpgradesFrom { get; set; }

        /// <summary>
        ///     Gets or Sets CategoryClass
        /// </summary>
        [DataMember(Name = "categoryClass", EmitDefaultValue = false)]
        public string CategoryClass { get; set; }

        /// <summary>
        ///     Gets or Sets SketchfabUrl
        /// </summary>
        [DataMember(Name = "sketchfabUrl", EmitDefaultValue = false)]
        public string SketchfabUrl { get; set; }

        /// <summary>
        ///     Gets or Sets DescriptionId
        /// </summary>
        [DataMember(Name = "descriptionId", EmitDefaultValue = false)]
        public string DescriptionId { get; set; }

        /// <summary>
        ///     Gets or Sets MaxDamage
        /// </summary>
        [DataMember(Name = "maxDamage", EmitDefaultValue = false)]
        public string MaxDamage { get; set; }

        /// <summary>
        ///     Gets or Sets BaseDamage
        /// </summary>
        [DataMember(Name = "baseDamage", EmitDefaultValue = false)]
        public string BaseDamage { get; set; }

        /// <summary>
        ///     Gets or Sets ExpectedDamage
        /// </summary>
        [DataMember(Name = "expectedDamage", EmitDefaultValue = false)]
        public string ExpectedDamage { get; set; }

        /// <summary>
        ///     Gets or Sets AvgHp
        /// </summary>
        [DataMember(Name = "avgHp", EmitDefaultValue = false)]
        public string AvgHp { get; set; }

        /// <summary>
        ///     Gets or Sets AvgHpDiff
        /// </summary>
        [DataMember(Name = "avgHpDiff", EmitDefaultValue = false)]
        public string AvgHpDiff { get; set; }

        /// <summary>
        ///     Gets or Sets AvgDmg
        /// </summary>
        [DataMember(Name = "avgDmg", EmitDefaultValue = false)]
        public string AvgDmg { get; set; }

        /// <summary>
        ///     Gets or Sets AvgDmgDiff
        /// </summary>
        [DataMember(Name = "avgDmgDiff", EmitDefaultValue = false)]
        public string AvgDmgDiff { get; set; }

        /// <summary>
        ///     Gets or Sets AvgAspd
        /// </summary>
        [DataMember(Name = "avgAspd", EmitDefaultValue = false)]
        public string AvgAspd { get; set; }

        /// <summary>
        ///     Gets or Sets AvgAspdDiff
        /// </summary>
        [DataMember(Name = "avgAspdDiff", EmitDefaultValue = false)]
        public string AvgAspdDiff { get; set; }

        /// <summary>
        ///     Gets or Sets AvgCost
        /// </summary>
        [DataMember(Name = "avgCost", EmitDefaultValue = false)]
        public string AvgCost { get; set; }

        /// <summary>
        ///     Gets or Sets AvgCostDiff
        /// </summary>
        [DataMember(Name = "avgCostDiff", EmitDefaultValue = false)]
        public string AvgCostDiff { get; set; }

        /// <summary>
        ///     Gets or Sets AvgMspd
        /// </summary>
        [DataMember(Name = "avgMspd", EmitDefaultValue = false)]
        public string AvgMspd { get; set; }

        /// <summary>
        ///     Gets or Sets AvgMspdDiff
        /// </summary>
        [DataMember(Name = "avgMspdDiff", EmitDefaultValue = false)]
        public string AvgMspdDiff { get; set; }

        /// <summary>
        ///     Returns true if UnitStats instances are equal
        /// </summary>
        /// <param name="input">Instance of UnitStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnitStats input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Hp == input.Hp ||
                    (Hp != null &&
                     Hp.Equals(input.Hp))
                ) &&
                (
                    Mp == input.Mp ||
                    (Mp != null &&
                     Mp.Equals(input.Mp))
                ) &&
                (
                    AttackSpeed == input.AttackSpeed ||
                    (AttackSpeed != null &&
                     AttackSpeed.Equals(input.AttackSpeed))
                ) &&
                (
                    AttackSpeedInverted == input.AttackSpeedInverted ||
                    (AttackSpeedInverted != null &&
                     AttackSpeedInverted.Equals(input.AttackSpeedInverted))
                ) &&
                (
                    MoveSpeed == input.MoveSpeed ||
                    (MoveSpeed != null &&
                     MoveSpeed.Equals(input.MoveSpeed))
                ) &&
                (
                    Flags == input.Flags ||
                    (Flags != null &&
                     Flags.Equals(input.Flags))
                ) &&
                (
                    AttackRange == input.AttackRange ||
                    (AttackRange != null &&
                     AttackRange.Equals(input.AttackRange))
                ) &&
                (
                    LegionId == input.LegionId ||
                    (LegionId != null &&
                     LegionId.Equals(input.LegionId))
                ) &&
                (
                    Tooltip == input.Tooltip ||
                    (Tooltip != null &&
                     Tooltip.Equals(input.Tooltip))
                ) &&
                (
                    GoldCost == input.GoldCost ||
                    (GoldCost != null &&
                     GoldCost.Equals(input.GoldCost))
                ) &&
                (
                    IconPath == input.IconPath ||
                    (IconPath != null &&
                     IconPath.Equals(input.IconPath))
                ) &&
                (
                    InfoTier == input.InfoTier ||
                    (InfoTier != null &&
                     InfoTier.Equals(input.InfoTier))
                ) &&
                (
                    MoveType == input.MoveType ||
                    (MoveType != null &&
                     MoveType.Equals(input.MoveType))
                ) &&
                (
                    MoveSpeedText == input.MoveSpeedText ||
                    (MoveSpeedText != null &&
                     MoveSpeedText.Equals(input.MoveSpeedText))
                ) &&
                (
                    Abilities == input.Abilities ||
                    (Abilities != null &&
                     input.Abilities != null &&
                     Abilities.SequenceEqual(input.Abilities))
                ) &&
                (
                    ArmorType == input.ArmorType ||
                    (ArmorType != null &&
                     ArmorType.Equals(input.ArmorType))
                ) &&
                (
                    GoldValue == input.GoldValue ||
                    (GoldValue != null &&
                     GoldValue.Equals(input.GoldValue))
                ) &&
                (
                    IsEnabled == input.IsEnabled ||
                    (IsEnabled != null &&
                     IsEnabled.Equals(input.IsEnabled))
                ) &&
                (
                    SortHelper == input.SortHelper ||
                    (SortHelper != null &&
                     SortHelper.Equals(input.SortHelper))
                ) &&
                (
                    UnitClass == input.UnitClass ||
                    (UnitClass != null &&
                     UnitClass.Equals(input.UnitClass))
                ) &&
                (
                    AttackMode == input.AttackMode ||
                    (AttackMode != null &&
                     AttackMode.Equals(input.AttackMode))
                ) &&
                (
                    AttackType == input.AttackType ||
                    (AttackType != null &&
                     AttackType.Equals(input.AttackType))
                ) &&
                (
                    GoldBounty == input.GoldBounty ||
                    (GoldBounty != null &&
                     GoldBounty.Equals(input.GoldBounty))
                ) &&
                (
                    ModelScale == input.ModelScale ||
                    (ModelScale != null &&
                     ModelScale.Equals(input.ModelScale))
                ) &&
                (
                    SplashPath == input.SplashPath ||
                    (SplashPath != null &&
                     SplashPath.Equals(input.SplashPath))
                ) &&
                (
                    TotalValue == input.TotalValue ||
                    (TotalValue != null &&
                     TotalValue.Equals(input.TotalValue))
                ) &&
                (
                    UpgradesTo == input.UpgradesTo ||
                    (UpgradesTo != null &&
                     input.UpgradesTo != null &&
                     UpgradesTo.SequenceEqual(input.UpgradesTo))
                ) &&
                (
                    IncomeBonus == input.IncomeBonus ||
                    (IncomeBonus != null &&
                     IncomeBonus.Equals(input.IncomeBonus))
                ) &&
                (
                    MythiumCost == input.MythiumCost ||
                    (MythiumCost != null &&
                     MythiumCost.Equals(input.MythiumCost))
                ) &&
                (
                    UpgradesFrom == input.UpgradesFrom ||
                    (UpgradesFrom != null &&
                     UpgradesFrom.Equals(input.UpgradesFrom))
                ) &&
                (
                    CategoryClass == input.CategoryClass ||
                    (CategoryClass != null &&
                     CategoryClass.Equals(input.CategoryClass))
                ) &&
                (
                    SketchfabUrl == input.SketchfabUrl ||
                    (SketchfabUrl != null &&
                     SketchfabUrl.Equals(input.SketchfabUrl))
                ) &&
                (
                    DescriptionId == input.DescriptionId ||
                    (DescriptionId != null &&
                     DescriptionId.Equals(input.DescriptionId))
                ) &&
                (
                    MaxDamage == input.MaxDamage ||
                    (MaxDamage != null &&
                     MaxDamage.Equals(input.MaxDamage))
                ) &&
                (
                    BaseDamage == input.BaseDamage ||
                    (BaseDamage != null &&
                     BaseDamage.Equals(input.BaseDamage))
                ) &&
                (
                    ExpectedDamage == input.ExpectedDamage ||
                    (ExpectedDamage != null &&
                     ExpectedDamage.Equals(input.ExpectedDamage))
                ) &&
                (
                    AvgHp == input.AvgHp ||
                    (AvgHp != null &&
                     AvgHp.Equals(input.AvgHp))
                ) &&
                (
                    AvgHpDiff == input.AvgHpDiff ||
                    (AvgHpDiff != null &&
                     AvgHpDiff.Equals(input.AvgHpDiff))
                ) &&
                (
                    AvgDmg == input.AvgDmg ||
                    (AvgDmg != null &&
                     AvgDmg.Equals(input.AvgDmg))
                ) &&
                (
                    AvgDmgDiff == input.AvgDmgDiff ||
                    (AvgDmgDiff != null &&
                     AvgDmgDiff.Equals(input.AvgDmgDiff))
                ) &&
                (
                    AvgAspd == input.AvgAspd ||
                    (AvgAspd != null &&
                     AvgAspd.Equals(input.AvgAspd))
                ) &&
                (
                    AvgAspdDiff == input.AvgAspdDiff ||
                    (AvgAspdDiff != null &&
                     AvgAspdDiff.Equals(input.AvgAspdDiff))
                ) &&
                (
                    AvgCost == input.AvgCost ||
                    (AvgCost != null &&
                     AvgCost.Equals(input.AvgCost))
                ) &&
                (
                    AvgCostDiff == input.AvgCostDiff ||
                    (AvgCostDiff != null &&
                     AvgCostDiff.Equals(input.AvgCostDiff))
                ) &&
                (
                    AvgMspd == input.AvgMspd ||
                    (AvgMspd != null &&
                     AvgMspd.Equals(input.AvgMspd))
                ) &&
                (
                    AvgMspdDiff == input.AvgMspdDiff ||
                    (AvgMspdDiff != null &&
                     AvgMspdDiff.Equals(input.AvgMspdDiff))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnitStats {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Hp: ").Append(Hp).Append("\n");
            sb.Append("  Mp: ").Append(Mp).Append("\n");
            sb.Append("  AttackSpeed: ").Append(AttackSpeed).Append("\n");
            sb.Append("  AttackSpeedInverted: ").Append(AttackSpeedInverted).Append("\n");
            sb.Append("  MoveSpeed: ").Append(MoveSpeed).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  AttackRange: ").Append(AttackRange).Append("\n");
            sb.Append("  LegionId: ").Append(LegionId).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  GoldCost: ").Append(GoldCost).Append("\n");
            sb.Append("  IconPath: ").Append(IconPath).Append("\n");
            sb.Append("  InfoTier: ").Append(InfoTier).Append("\n");
            sb.Append("  MoveType: ").Append(MoveType).Append("\n");
            sb.Append("  MoveSpeedText: ").Append(MoveSpeedText).Append("\n");
            sb.Append("  Abilities: ").Append(Abilities).Append("\n");
            sb.Append("  ArmorType: ").Append(ArmorType).Append("\n");
            sb.Append("  GoldValue: ").Append(GoldValue).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  SortHelper: ").Append(SortHelper).Append("\n");
            sb.Append("  UnitClass: ").Append(UnitClass).Append("\n");
            sb.Append("  AttackMode: ").Append(AttackMode).Append("\n");
            sb.Append("  AttackType: ").Append(AttackType).Append("\n");
            sb.Append("  GoldBounty: ").Append(GoldBounty).Append("\n");
            sb.Append("  ModelScale: ").Append(ModelScale).Append("\n");
            sb.Append("  SplashPath: ").Append(SplashPath).Append("\n");
            sb.Append("  TotalValue: ").Append(TotalValue).Append("\n");
            sb.Append("  UpgradesTo: ").Append(UpgradesTo).Append("\n");
            sb.Append("  IncomeBonus: ").Append(IncomeBonus).Append("\n");
            sb.Append("  MythiumCost: ").Append(MythiumCost).Append("\n");
            sb.Append("  UpgradesFrom: ").Append(UpgradesFrom).Append("\n");
            sb.Append("  CategoryClass: ").Append(CategoryClass).Append("\n");
            sb.Append("  SketchfabUrl: ").Append(SketchfabUrl).Append("\n");
            sb.Append("  DescriptionId: ").Append(DescriptionId).Append("\n");
            sb.Append("  MaxDamage: ").Append(MaxDamage).Append("\n");
            sb.Append("  BaseDamage: ").Append(BaseDamage).Append("\n");
            sb.Append("  ExpectedDamage: ").Append(ExpectedDamage).Append("\n");
            sb.Append("  AvgHp: ").Append(AvgHp).Append("\n");
            sb.Append("  AvgHpDiff: ").Append(AvgHpDiff).Append("\n");
            sb.Append("  AvgDmg: ").Append(AvgDmg).Append("\n");
            sb.Append("  AvgDmgDiff: ").Append(AvgDmgDiff).Append("\n");
            sb.Append("  AvgAspd: ").Append(AvgAspd).Append("\n");
            sb.Append("  AvgAspdDiff: ").Append(AvgAspdDiff).Append("\n");
            sb.Append("  AvgCost: ").Append(AvgCost).Append("\n");
            sb.Append("  AvgCostDiff: ").Append(AvgCostDiff).Append("\n");
            sb.Append("  AvgMspd: ").Append(AvgMspd).Append("\n");
            sb.Append("  AvgMspdDiff: ").Append(AvgMspdDiff).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as UnitStats);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Hp != null)
                    hashCode = hashCode * 59 + Hp.GetHashCode();
                if (Mp != null)
                    hashCode = hashCode * 59 + Mp.GetHashCode();
                if (AttackSpeed != null)
                    hashCode = hashCode * 59 + AttackSpeed.GetHashCode();
                if (AttackSpeedInverted != null)
                    hashCode = hashCode * 59 + AttackSpeedInverted.GetHashCode();
                if (MoveSpeed != null)
                    hashCode = hashCode * 59 + MoveSpeed.GetHashCode();
                if (Flags != null)
                    hashCode = hashCode * 59 + Flags.GetHashCode();
                if (AttackRange != null)
                    hashCode = hashCode * 59 + AttackRange.GetHashCode();
                if (LegionId != null)
                    hashCode = hashCode * 59 + LegionId.GetHashCode();
                if (Tooltip != null)
                    hashCode = hashCode * 59 + Tooltip.GetHashCode();
                if (GoldCost != null)
                    hashCode = hashCode * 59 + GoldCost.GetHashCode();
                if (IconPath != null)
                    hashCode = hashCode * 59 + IconPath.GetHashCode();
                if (InfoTier != null)
                    hashCode = hashCode * 59 + InfoTier.GetHashCode();
                if (MoveType != null)
                    hashCode = hashCode * 59 + MoveType.GetHashCode();
                if (MoveSpeedText != null)
                    hashCode = hashCode * 59 + MoveSpeedText.GetHashCode();
                if (Abilities != null)
                    hashCode = hashCode * 59 + Abilities.GetHashCode();
                if (ArmorType != null)
                    hashCode = hashCode * 59 + ArmorType.GetHashCode();
                if (GoldValue != null)
                    hashCode = hashCode * 59 + GoldValue.GetHashCode();
                if (IsEnabled != null)
                    hashCode = hashCode * 59 + IsEnabled.GetHashCode();
                if (SortHelper != null)
                    hashCode = hashCode * 59 + SortHelper.GetHashCode();
                if (UnitClass != null)
                    hashCode = hashCode * 59 + UnitClass.GetHashCode();
                if (AttackMode != null)
                    hashCode = hashCode * 59 + AttackMode.GetHashCode();
                if (AttackType != null)
                    hashCode = hashCode * 59 + AttackType.GetHashCode();
                if (GoldBounty != null)
                    hashCode = hashCode * 59 + GoldBounty.GetHashCode();
                if (ModelScale != null)
                    hashCode = hashCode * 59 + ModelScale.GetHashCode();
                if (SplashPath != null)
                    hashCode = hashCode * 59 + SplashPath.GetHashCode();
                if (TotalValue != null)
                    hashCode = hashCode * 59 + TotalValue.GetHashCode();
                if (UpgradesTo != null)
                    hashCode = hashCode * 59 + UpgradesTo.GetHashCode();
                if (IncomeBonus != null)
                    hashCode = hashCode * 59 + IncomeBonus.GetHashCode();
                if (MythiumCost != null)
                    hashCode = hashCode * 59 + MythiumCost.GetHashCode();
                if (UpgradesFrom != null)
                    hashCode = hashCode * 59 + UpgradesFrom.GetHashCode();
                if (CategoryClass != null)
                    hashCode = hashCode * 59 + CategoryClass.GetHashCode();
                if (SketchfabUrl != null)
                    hashCode = hashCode * 59 + SketchfabUrl.GetHashCode();
                if (DescriptionId != null)
                    hashCode = hashCode * 59 + DescriptionId.GetHashCode();
                if (MaxDamage != null)
                    hashCode = hashCode * 59 + MaxDamage.GetHashCode();
                if (BaseDamage != null)
                    hashCode = hashCode * 59 + BaseDamage.GetHashCode();
                if (ExpectedDamage != null)
                    hashCode = hashCode * 59 + ExpectedDamage.GetHashCode();
                if (AvgHp != null)
                    hashCode = hashCode * 59 + AvgHp.GetHashCode();
                if (AvgHpDiff != null)
                    hashCode = hashCode * 59 + AvgHpDiff.GetHashCode();
                if (AvgDmg != null)
                    hashCode = hashCode * 59 + AvgDmg.GetHashCode();
                if (AvgDmgDiff != null)
                    hashCode = hashCode * 59 + AvgDmgDiff.GetHashCode();
                if (AvgAspd != null)
                    hashCode = hashCode * 59 + AvgAspd.GetHashCode();
                if (AvgAspdDiff != null)
                    hashCode = hashCode * 59 + AvgAspdDiff.GetHashCode();
                if (AvgCost != null)
                    hashCode = hashCode * 59 + AvgCost.GetHashCode();
                if (AvgCostDiff != null)
                    hashCode = hashCode * 59 + AvgCostDiff.GetHashCode();
                if (AvgMspd != null)
                    hashCode = hashCode * 59 + AvgMspd.GetHashCode();
                if (AvgMspdDiff != null)
                    hashCode = hashCode * 59 + AvgMspdDiff.GetHashCode();
                return hashCode;
            }
        }
    }
}